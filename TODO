x Inform loginservice of member deletion
x Member data validation request
x Compatibility requests
x Data seeding
x Get member by seo_url

x Permission search for local:create:circle returns result
x Return all circles when requesting /circles?all=true
x Adjust error format to oms standarts
x Allow creating bound circles without being member of the body
x Request to assign members to a circle
x Store information alongside with the body membership
x Searching in body_memberships and circle_memberships
o Seo_url for bodies and circles

x Fix profile view
x Fix url in mails

o Suspend users request
o When creating a bound circle, update the view
o Circles listing for some reason queries the backend twice...
o Shadow circle for every body or directly assign permissions to bodies
o Body types as an additional filter option to bodies
x Filtering permissions
o put_children request which allows to put circles that don't yet have a parent as a child

o Circle single view: only show child circles after a button click as that list might get long
x Create campaigns frontend view
o Create script to import bodies

Idea towards cross-service auth: each service can create his own access tokens which are just cryptographically verified, not whether they were actually handed out by the loginservice. So when a service wants something directly from another service without user interaction, it could generate himself a token to do so...